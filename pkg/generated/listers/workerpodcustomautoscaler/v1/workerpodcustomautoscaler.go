/*
Copyright 2019 Practo Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/practo/k8s-worker-pod-autoscaler/pkg/apis/workerpodcustomautoscaler/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WorkerPodCustomAutoScalerLister helps list WorkerPodCustomAutoScalers.
// All objects returned here must be treated as read-only.
type WorkerPodCustomAutoScalerLister interface {
	// List lists all WorkerPodCustomAutoScalers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.WorkerPodCustomAutoScaler, err error)
	// WorkerPodCustomAutoScalers returns an object that can list and get WorkerPodCustomAutoScalers.
	WorkerPodCustomAutoScalers(namespace string) WorkerPodCustomAutoScalerNamespaceLister
	WorkerPodCustomAutoScalerListerExpansion
}

// workerPodCustomAutoScalerLister implements the WorkerPodCustomAutoScalerLister interface.
type workerPodCustomAutoScalerLister struct {
	indexer cache.Indexer
}

// NewWorkerPodCustomAutoScalerLister returns a new WorkerPodCustomAutoScalerLister.
func NewWorkerPodCustomAutoScalerLister(indexer cache.Indexer) WorkerPodCustomAutoScalerLister {
	return &workerPodCustomAutoScalerLister{indexer: indexer}
}

// List lists all WorkerPodCustomAutoScalers in the indexer.
func (s *workerPodCustomAutoScalerLister) List(selector labels.Selector) (ret []*v1.WorkerPodCustomAutoScaler, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.WorkerPodCustomAutoScaler))
	})
	return ret, err
}

// WorkerPodCustomAutoScalers returns an object that can list and get WorkerPodCustomAutoScalers.
func (s *workerPodCustomAutoScalerLister) WorkerPodCustomAutoScalers(namespace string) WorkerPodCustomAutoScalerNamespaceLister {
	return workerPodCustomAutoScalerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WorkerPodCustomAutoScalerNamespaceLister helps list and get WorkerPodCustomAutoScalers.
// All objects returned here must be treated as read-only.
type WorkerPodCustomAutoScalerNamespaceLister interface {
	// List lists all WorkerPodCustomAutoScalers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.WorkerPodCustomAutoScaler, err error)
	// Get retrieves the WorkerPodCustomAutoScaler from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.WorkerPodCustomAutoScaler, error)
	WorkerPodCustomAutoScalerNamespaceListerExpansion
}

// workerPodCustomAutoScalerNamespaceLister implements the WorkerPodCustomAutoScalerNamespaceLister
// interface.
type workerPodCustomAutoScalerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all WorkerPodCustomAutoScalers in the indexer for a given namespace.
func (s workerPodCustomAutoScalerNamespaceLister) List(selector labels.Selector) (ret []*v1.WorkerPodCustomAutoScaler, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.WorkerPodCustomAutoScaler))
	})
	return ret, err
}

// Get retrieves the WorkerPodCustomAutoScaler from the indexer for a given namespace and name.
func (s workerPodCustomAutoScalerNamespaceLister) Get(name string) (*v1.WorkerPodCustomAutoScaler, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("workerpodcustomautoscaler"), name)
	}
	return obj.(*v1.WorkerPodCustomAutoScaler), nil
}
