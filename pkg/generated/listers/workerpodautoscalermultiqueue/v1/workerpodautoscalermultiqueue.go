/*
Copyright 2019 Practo Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/practo/k8s-worker-pod-autoscaler/pkg/apis/workerpodautoscalermultiqueue/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WorkerPodAutoScalerMultiQueueLister helps list WorkerPodAutoScalerMultiQueues.
// All objects returned here must be treated as read-only.
type WorkerPodAutoScalerMultiQueueLister interface {
	// List lists all WorkerPodAutoScalerMultiQueues in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.WorkerPodAutoScalerMultiQueue, err error)
	// WorkerPodAutoScalerMultiQueues returns an object that can list and get WorkerPodAutoScalerMultiQueues.
	WorkerPodAutoScalerMultiQueues(namespace string) WorkerPodAutoScalerMultiQueueNamespaceLister
	WorkerPodAutoScalerMultiQueueListerExpansion
}

// workerPodAutoScalerMultiQueueLister implements the WorkerPodAutoScalerMultiQueueLister interface.
type workerPodAutoScalerMultiQueueLister struct {
	indexer cache.Indexer
}

// NewWorkerPodAutoScalerMultiQueueLister returns a new WorkerPodAutoScalerMultiQueueLister.
func NewWorkerPodAutoScalerMultiQueueLister(indexer cache.Indexer) WorkerPodAutoScalerMultiQueueLister {
	return &workerPodAutoScalerMultiQueueLister{indexer: indexer}
}

// List lists all WorkerPodAutoScalerMultiQueues in the indexer.
func (s *workerPodAutoScalerMultiQueueLister) List(selector labels.Selector) (ret []*v1.WorkerPodAutoScalerMultiQueue, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.WorkerPodAutoScalerMultiQueue))
	})
	return ret, err
}

// WorkerPodAutoScalerMultiQueues returns an object that can list and get WorkerPodAutoScalerMultiQueues.
func (s *workerPodAutoScalerMultiQueueLister) WorkerPodAutoScalerMultiQueues(namespace string) WorkerPodAutoScalerMultiQueueNamespaceLister {
	return workerPodAutoScalerMultiQueueNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WorkerPodAutoScalerMultiQueueNamespaceLister helps list and get WorkerPodAutoScalerMultiQueues.
// All objects returned here must be treated as read-only.
type WorkerPodAutoScalerMultiQueueNamespaceLister interface {
	// List lists all WorkerPodAutoScalerMultiQueues in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.WorkerPodAutoScalerMultiQueue, err error)
	// Get retrieves the WorkerPodAutoScalerMultiQueue from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.WorkerPodAutoScalerMultiQueue, error)
	WorkerPodAutoScalerMultiQueueNamespaceListerExpansion
}

// workerPodAutoScalerMultiQueueNamespaceLister implements the WorkerPodAutoScalerMultiQueueNamespaceLister
// interface.
type workerPodAutoScalerMultiQueueNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all WorkerPodAutoScalerMultiQueues in the indexer for a given namespace.
func (s workerPodAutoScalerMultiQueueNamespaceLister) List(selector labels.Selector) (ret []*v1.WorkerPodAutoScalerMultiQueue, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.WorkerPodAutoScalerMultiQueue))
	})
	return ret, err
}

// Get retrieves the WorkerPodAutoScalerMultiQueue from the indexer for a given namespace and name.
func (s workerPodAutoScalerMultiQueueNamespaceLister) Get(name string) (*v1.WorkerPodAutoScalerMultiQueue, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("workerpodautoscalermultiqueue"), name)
	}
	return obj.(*v1.WorkerPodAutoScalerMultiQueue), nil
}
